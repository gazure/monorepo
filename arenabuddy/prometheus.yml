global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'arenabuddy-monitor'
    environment: 'local'

# Alertmanager configuration (optional)
alerting:
  alertmanagers:
    - static_configs:
        - targets: []
          # - 'alertmanager:9093'

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# Scrape configurations
scrape_configs:
  # Scrape OpenTelemetry Collector's Prometheus exporter
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8889']
        labels:
          service: 'arenabuddy'
    metric_relabel_configs:
      # Drop internal gRPC metrics to reduce noise
      - source_labels: [__name__]
        regex: '.*grpc_io.*'
        action: drop
      # Drop internal OTLP metrics if not needed
      - source_labels: [__name__]
        regex: 'otelcol_.*'
        action: drop

  # Scrape OpenTelemetry Collector's own metrics
  - job_name: 'otel-collector-telemetry'
    static_configs:
      - targets: ['otel-collector:8888']
        labels:
          service: 'otel-collector'

  # Scrape Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
        labels:
          service: 'prometheus'

  # Optional: Scrape Grafana metrics
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
        labels:
          service: 'grafana'